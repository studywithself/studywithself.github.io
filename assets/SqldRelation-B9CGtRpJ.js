import{_ as s,c as r,b as e,o}from"./index-C3RhNgxk.js";const l={},n={class:"flex flex-col gap-5"};function g(a,t){return o(),r("div",n,t[0]||(t[0]=[e('<h1 class="text-3xl font-bold">관계형 데이터베이스</h1><p> 우리는 앞서 데이터의 집합을 <strong class="text-blue-600">데이터베이스(Database)</strong>라고 정의했습니다. <br> 이 데이터를 효율적으로 관리하기 위한 <strong class="text-blue-600">시스템</strong>을 <strong class="text-blue-600">DBMS</strong>(데이터베이스 관리 시스템)이라고 부릅니다. <br> 관계에는 <strong class="text-blue-600">Relation</strong>과 <strong class="text-blue-600">Relationship</strong>의 개념이 있습니다. <br> 1과목에서 관계(relationship)를 배웠고, 지금은 관계(relation)로 설명하겠습니다. </p><h2 class="text-blue-600 font-bold text-xl my-2">수학적 관계 (Relation)</h2><p> 관계형 데이터베이스에서 <strong class="text-blue-600">관계형</strong>은 수학적 개념인 <strong class="text-blue-600">관계(Relation)</strong> 이론에 기반을 둡니다. <br><strong class="text-blue-600">행</strong>과 <strong class="text-blue-600">열</strong>로 이루어진 데이터가 구조화 되어 <strong class="text-blue-600">테이블</strong>에 저장되고, <br> 이 구조를 통해 데이터의 일관성과 무결성을 보장합니다. <br> 따라서, 테이블 간의 관계(relationship)을 통해 데이터가 효율적으로 관리됩니다. </p><p> 테이블은 관계(relationship)을 가지며 1:1, 1:N, N:M의 다양한 관계를 나타냅니다. <br> 이는 키를 통해 연결 되며, 데이터의 일관성을 유지하는 데 필수적인 요소입니다. </p><p> 관계형 데이터베이스의 구성 요소는 <strong class="text-blue-600">스키마, 테이블, 계정</strong>이 있습니다. <br> 스키마와 테이블은 1과목에서 배운 내용입니다. </p><p><strong class="text-blue-600">계정</strong>은 <strong class="text-blue-600">데이터베이스</strong>에 접근하는 사용자를 식별하고 관리하기 위한 목적을 가지고 있습니다. <br> 각 사용자에게 필요한 접근 권한 수준(읽기, 쓰기, 수정, 삭제 등)을 제어하고, 이에 맞는 권한을 부여합니다. </p><p><strong class="text-blue-600">스키마</strong>는 데이터 객체들(테이블, 뷰)을 논리적으로 묶는 역할을 합니다. <br><strong class="text-blue-600">테이블</strong>은 실제로 데이터가 저장되는 공간이며, 스키마에 소속 되어있습니다. <br><strong class="text-blue-600">계정</strong>은 이러한 스키마와 테이블에 대한 <strong class="text-blue-600">권한</strong>을 가집니다. <br> 특정 스키마를 소유한 계정이 곧 테이블의 소유자라고 할 수 있습니다. </p><p> 특정 스키마를 최초 제작한 계정이 <strong class="text-blue-600">소유자</strong>가 됩니다. <br> 그 안에 <strong class="text-blue-600">포함 되어있는 객체</strong>(테이블, 뷰)를 만들어도 자동으로 <strong class="text-blue-600">해당 계정이 소유권</strong>을 가지게 됩니다. <br> 소유자는 다른 계정을 상대로 해당 스키마에 대한 권한을 추가, 수정, 삭제 할 수있는 권한을 가지게 됩니다. </p><p> 데이터베이스 내에서 스키마, 같은 스키마 내에서 테이블의 이름이 중복 될 수 없습니다. <br> 단, 다른 스키마에 속한 테이블은 이름이 같아도 됩니다. <br> 스키마 이름을 중심으로 테이블을 구분할 수 있기 때문입니다. </p><p> 관계형 데이터베이스(relation)의 <br><strong class="text-blue-600">장점</strong>으로는 <strong class="text-blue-600">무결성</strong>을 보장 받으며 데이터 관리를 <strong class="text-blue-600">효율적</strong>으로 할 수 있어 <strong class="text-blue-600">신뢰성</strong>이 높습니다. <br><strong class="text-blue-600">단점</strong>으로는 기존에 설계 된 스키마는 <strong class="text-blue-600">수정하기 어렵고</strong> DB의 <strong class="text-blue-600">부하를 분석</strong>, <strong class="text-blue-600">최적화</strong>하는 작업이 까다롭습니다. </p>',11)]))}const c=s(l,[["render",g]]);export{c as default};
