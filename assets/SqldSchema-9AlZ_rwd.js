import{_ as r,c as s,b as o,o as e}from"./index-C3RhNgxk.js";const n={},b={class:"flex flex-col gap-5"};function l(c,t){return e(),s("div",b,t[0]||(t[0]=[o('<h1 class="text-3xl font-bold">스키마 Schema</h1><p> 데이터베이스 스키마는 전체 설계도와 같은 역할을 수행합니다. <br> 객체, 데이터 타입, 제약 조건, 관계 등을 모두 포함하는 구조 자체가 되기 때문입니다. </p><h2 class="text-blue-600 font-bold text-xl my-2">스키마의 3단계 구조</h2><p> 스키마에는 3단계 구조가 있습니다. <br> 외부 스키마 → 개념 스키마 → 내부 스키마로 이어집니다. <br> 개념을 먼저 정해보고, 논리적으로 설계 한 다음, 실제로 저장하는 과정을 의미합니다. </p><p><strong>1. 외부 스키마</strong> <br> 이용하는 사람에 따라 부분적으로 자료를 공개하는 범위인 <strong class="text-blue-600">뷰</strong>를 정의합니다. <br><strong class="text-blue-600">서브 스키마</strong>, <strong class="text-blue-600">사용자 뷰</strong> 라고도 불리며, 여러 사용자가 같은 데이터베이스를 조회하더라도, <br> 권한 또는 용도에 맞는 자료만 제공 받을 수 있도록 정의합니다. 이는 맞춤형 창 같은 존재입니다. </p><p><strong>2. 개념 스키마</strong> <br> 데이터베이스의 전체 논리적 구조입니다. 엔티티, 속성, 타입, 관계 등을 정의합니다. <br> 데이터베이스 관리자가 전체적으로 어떻게 설계했는지 보여주는 파트입니다. <br> 테이블, 속성, 관계를 포함해 전체 데이터베이스 무결성 제약 조건을 보여줍니다. 이는 전체 설계도와 같습니다. </p><p><strong>3. 내부 스키마</strong> <br> 데이터의 물리적인 저장 방식을 정의하는 단계입니다. <br> 실제 데이터가 하드디스크에 어떤 파일 형태로, 어떤 인덱스로 저장하는지 상세히 기술합니다. <br> 사용자는 알 필요가 없으나, 설계자에게는 필요한 단계입니다. 효율적인 데이터 접근을 위해 최적화합니다. <br> 이는 기술 세부사항과 같습니다. </p><h2 class="text-blue-600 font-bold text-xl my-2">독립성</h2><p> 위 <strong class="text-blue-600">3단계 스키마 구조</strong>를 통해 스키마가 독립성을 가지기 위해 노력했습니다. <br> 여기서 독립성이란, 하나의 스키마를 변경해도 다른 스키마나 시스템에 영향을 주지 않는 것을 의미합니다. <br> 독립성은 두 가지로 나눠서 볼 수 있습니다. </p><p><strong>1. 논리적 독립성</strong> <br> 개념 스키마가 변경되어도 외부 스키마나 응용 프로그램에 영향을 주지 않는 성질. </p><p><strong>2. 물리적 독립성</strong> <br> 내부 스키마가 변경 되어도 개념 스키마나 응용 프로그램에 영향을 주지 않는 성질. </p><p> 쉽게 설명해서 논리적 독립성은 테이블에 속성을 추가해도 다른 프로그램을 변경할 필요가 없습니다. <br> 물리적 독립성은 저장매체를 바꾸어도, 프로그램 코드는 그대로 유지가 됩니다. </p>',12)]))}const a=r(n,[["render",l]]);export{a as default};
