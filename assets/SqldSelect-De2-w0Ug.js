import{_ as t,c as r,b as o,o as e}from"./index-C3RhNgxk.js";const n={},l={class:"flex flex-col gap-5"};function g(c,s){return e(),r("div",l,s[0]||(s[0]=[o(`<h1 class="text-3xl font-bold">SELECT문</h1><p><strong class="text-blue-600">SELECT</strong>문은 SQL에서 <strong class="text-blue-600">가장 많이 사용</strong>되는 명령어입니다. 저장된 데이터를 <strong class="text-blue-600">조회</strong>하는 데 사용합니다. <br> SELECT문은 읽기만 할 뿐, 변경하지는 않기에 영향을 주지는 않습니다. </p><h2 class="text-blue-600 font-bold text-xl my-2">SELECT문의 구조</h2><p> SELECT문은 크게 <strong class="text-blue-600">SELECT절</strong>, <strong class="text-blue-600">FROM절</strong> 그리고 <strong class="text-blue-600">선택</strong>적으로 사용되는 4개. 총 6개의 절까지 가능합니다. <br> 각 절은 아래 순서대로 작성해야 합니다. </p><div class="p-4 w-70 bg-gray-200 rounded-lg shadow-lg"><pre><code class="language-sql">
<strong class="text-rose-600">SELECT</strong> 속성
<strong class="text-rose-600">FROM</strong> 테이블
<strong class="text-rose-600">WHERE</strong> 행
<strong class="text-rose-600">GROUP BY</strong> 특정 열 그룹화
<strong class="text-rose-600">HAVING</strong> 그룹화 결과 필터링
<strong class="text-rose-600">ORDER BY</strong> 특정 열 정렬
  </code></pre></div><p><strong class="text-rose-600">SELECT</strong> : 가져올 열을 지정합니다. 모든 열을 가져오려면 *를 사용합니다. <br><strong class="text-rose-600">FROM</strong> : 가져올 테이블을 지정합니다. <br><strong class="text-rose-600">WHERE</strong> : 특정 조건을 만족하는 행만 필터링합니다. <br><strong class="text-rose-600">GROUP BY</strong> : 특정 열을 기준으로 행들을 그룹화합니다. 집계함수(COUNT, SUM 등) 함께 쓰입니다. <br><strong class="text-rose-600">HAVING</strong> : 위 GROUP BY에서 그룹화 된 결과에 조건을 추가로 적용해 필터링합니다. <br><strong class="text-rose-600">ORDER BY</strong> : 특정 열을 기준으로 오름차순, 내림차순으로 결과를 정렬합니다. </p><h2 class="text-blue-600 font-bold text-xl my-2">SELECT문의 논리적 실행 순서</h2><p> 코드의 작성 순서와 다르게, DBMS가 쿼리를 실행하는 <strong class="text-blue-600">내부적인 순서</strong>가 있습니다. <br> 위에서 보여준 작성한 코드가 해당 순서대로 동작합니다. <br><br> 1. FROM: 조회할 데이터가 있는 테이블을 지정합니다. <br> 2. WHERE: 특정 조건을 만족하는 행(row)만 추출하여 필터링합니다. <br> 3. GROUP BY: WHERE 절을 통과한 데이터들을 특정 컬럼을 기준으로 그룹화합니다. <br> 4. HAVING: 그룹화된 결과에 대해 추가적인 필터링 조건을 적용합니다. <br> 5. SELECT: 최종적으로 출력하고 싶은 컬럼이나 연산 결과를 선택합니다. <br> 6. ORDER BY: 최종 결과물을 특정 컬럼을 기준으로 정렬합니다. <br><br> 쉽게, 기존의 순서에서 SELECT문이 가장 아래로 내려와 ORDER BY보다는 먼저 실행 된다는 점입니다. </p>`,8)]))}const E=t(n,[["render",g]]);export{E as default};
